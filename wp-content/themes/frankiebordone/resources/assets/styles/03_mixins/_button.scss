/* ==============================================================================================

// BUTTON MIXINS

================================================================================================= */

/**
* Default button styles
*
* @param   {Map}       $conf   Optional input arguments
*
*   @type  {Color}    bg        Defines `background-color` property
*   @type  {Color}    color     Defines `color` property
*   @type  {Number}   size      Defines `font-size` context for all button sizing properties (should be in `px` or unitless)
*/
@mixin button( $conf: () ) {
  // merge default arguments
  $conf: map-merge(
    (
      bg: c(blue),
      color: c(white),
      // override default font size (in px)
      size: $font-size-button
    ),
    $conf
  );

  // check what font-size context should be used
  $context: map-get($conf, size);

  // background
  $bg: map-get($conf, bg);

  @if not is-null($bg) and type-of($bg) == 'color' {
    background-color: #{$bg};
  }

  // text color
  $color: map-get($conf, color);

  @if type-of($color) == 'color' {
    color: #{$color};
    &:visited { color: #{$color}; }
  }

  // other default button styles
  cursor: pointer;
  // font-family is hard-coded as @font-family mixin may or may not be available yet
  @include font-family((type: default, weight: normal));
  font-size: $font-size-button;
  letter-spacing: 1.5px;
  position: relative;
  z-index: 1;
  display: inline-block;
  text-transform: uppercase;
  padding: 0 27px;
  line-height: 45px;
  height: 45px;
  text-align: center;
  overflow: hidden;
  border: none;
  border-radius: 0;

  &::before {
    content: '';
    @include transition((properties: all));
    position: absolute;
    top: auto;
    bottom: 0;
    left: 0;
    height: 2px;
    width: 100%;
    background-color: c(white);
    z-index: z(hidden);
    transform: scaleX(0);
    transform-origin: 0 0;
  }

  &:hover {
    &::before {
      transform: scaleX(1);
    }
  }

  // allow overrides
  @content;
}
